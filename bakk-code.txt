//////////////////////////////////////////////////-------------------------------------------



/////////////// push modified to system


    void moveToData(){

        Process process = null;
        DataOutputStream os = null;

        try {
            process = Runtime.getRuntime().exec("su");
            os = new DataOutputStream(process.getOutputStream());
            // os.writeBytes("mount -o remount,rw /system");
            os.writeBytes("rm /data/system/packages.xml\n");
            // os.writeBytes("cp -f " + tempFile + " /data/system/packages.xml\n");
            os.writeBytes("cat " + tempFile + " > /data/system/packages.xml\n");
            os.writeBytes("chmod 777 /data/system/packages.xml\n");
            // os.writeBytes("mount -o remount,ro /system");
            //os.writeBytes("mount -o remount,ro -t yaffs2 /dev/block/mtdblock4 /system\n");
            os.writeBytes("exit\n");
            os.flush();
            process.waitFor();
        } catch (Exception e) {
            Toast.makeText(getApplicationContext(), "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
        } finally {
            try {
                if (os != null) {
                    os.close();
                }
                process.destroy();
            } catch (Exception e) {
                Toast.makeText(getApplicationContext(), "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
            }
        }

        Toast.makeText(getApplicationContext(), "packages.xml moved to /data/system from " + tempFile, Toast.LENGTH_SHORT).show();
        success = true;
        new LoadView().execute();
    }

/*

            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document doc = documentBuilder.parse(new File(tempFile));

            Element packagesTag = (Element) doc.getElementsByTagName("packages").item(0);
            NodeList packageList =  packagesTag.getElementsByTagName("package");

            for (int i = 0; i < packageList.getLength(); i++, isSelected = false) {
                Node node = packageList.item(i);
                Element elem = (Element)node;

                Element perms =  (Element) elem.getElementsByTagName("perms").item(0);
                if(perms != null) {
                    NodeList permItems = perms.getChildNodes();
                    for (int j = 0; j < permItems.getLength(); j++) {
                        Element node1 = (Element) packageList.item(j);
                        String result = null;
                        if(node1 != null) {
                            result = node1.getAttribute("android.permission.WRITE_MEDIA_STORAGE");
                        }

                        if (result != null) {
                        } else {
                            isSelected = true;
                        }
                    }

                }



                pkgname = elem.getAttribute("name");


                try {
                    ai = pm.getApplicationInfo( pkgname, 0);
                    icon = getPackageManager().getApplicationIcon(pkgname);
                } catch (final PackageManager.NameNotFoundException e) {
                    ai = null;
                }
                String applicationName = (String) (ai != null ? pm.getApplicationLabel(ai) : "(unknown)");

                ListItem item = new ListItem(pkgname, applicationName,icon, isSelected );
                appList.add(item);
            }




        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        }catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (SAXException sae) {
            sae.printStackTrace();
        }

        */


